<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>First集和Follow集</title>
    <link href="/2021/11/20/First%E9%9B%86%E5%92%8CFollow%E9%9B%86/"/>
    <url>/2021/11/20/First%E9%9B%86%E5%92%8CFollow%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><h2 id="串首终结符集（First）"><a href="#串首终结符集（First）" class="headerlink" title="串首终结符集（First）"></a>串首终结符集（First）</h2><p>定义：给定一个文法符号α，α的串首终结符集First(α)被定义为可以从α推导出的所有串首终结符构成的集合。<br>串首终结符意思就是符号串的首字符是终结符，所以由 α 推导出的所有首字母是终结符的文法符号串，这些终结符首字母组成的集合就是FIRST(α)。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>例如一个文法符号串 BCDe, 其中 B C D 都是非终结符，e 是终结符。</p><ol><li>求产生式右侧BCDe的First集合，首先要求出B能推导多少个串首终结符。这个就要求出First(B)</li><li>如果B能够推出空串ε，即B-&gt;ε，那么B就是可以消除的，文法符号串BCDe相当于CDe，所以又要求First(C).</li><li>如此循环往复。</li></ol><h3 id="因此对于一个文法符号串-X1X2-…-Xn，求解串首终结符集-FIRST-X1X2-…-Xn-算法"><a href="#因此对于一个文法符号串-X1X2-…-Xn，求解串首终结符集-FIRST-X1X2-…-Xn-算法" class="headerlink" title="因此对于一个文法符号串 X1X2 … Xn，求解串首终结符集 FIRST(X1X2 … Xn)算法"></a>因此对于一个文法符号串 X1X2 … Xn，求解串首终结符集 FIRST(X1X2 … Xn)算法</h3><ol><li>遍历这个文法符号串，然后判断当前文法符号串中的字符 Xi (i属于1到n)。</li><li>如果 Xi 是终结符，那么它的串首终结符集FIRST(Xi)中就只有它自己，将FIRST(Xi)加入FIRST(X1X2 … Xn) 中；因为FIRST(Xi)也不可能包含空串 ε，不用再向下遍历，循环到此为止，得到最终的串首终结符集FIRST(X1X2 … Xn)。</li><li>如果 Xi 是非终结符，那么就将它的串首终结符集FIRST(Xi)加入FIRST(X1X2 … Xn) 中。</li></ol><ul><li>如果FIRST(Xi)包含空串ε，那么再向下遍历一个字符；但是如果 Xi 已经是最后一个字符了，那就说明整个文法符号串 X1X2 … Xn可以推导出空串ε，因此将空串ε加到FIRST(X1X2 … Xn) 中。</li><li>如果FIRST(Xi)不包含空串ε，不用再向下遍历，循环到此为止，得到最终的串首终结符集FIRST(X1X2 … Xn)。如求非终结符A 的串首终结符集FIRST(A)，其实就是看这个非终结符A 能够推导的所有首字符是终结符的文法符号串，那么就是看这个非终结符A 的产生式组。</li></ul><h3 id="非终结符本身就属于一个特殊的文法符号串"><a href="#非终结符本身就属于一个特殊的文法符号串" class="headerlink" title="非终结符本身就属于一个特殊的文法符号串"></a>非终结符本身就属于一个特殊的文法符号串</h3><p>而求解文法符号串的串首终结符集，其实就是要知道文法符号串中每个字符的串首终结符集:</p><ol><li>对于终结符，它的串首终结符集就是它自己。</li><li>对于非终结符，它的串首终结符集是要通过它对应的产生式组计算得来的。</li><li>再判断当前字符对应的串首终结符集包不包含空串，来决定要不要添加文法符号串中下一个字符的串首终结符集。</li></ol><h2 id="后继符号集（Follow）"><a href="#后继符号集（Follow）" class="headerlink" title="后继符号集（Follow）"></a>后继符号集（Follow）</h2><p>定义：对于任一非终结符A，它的后继符号集就是由文法G推导出来的所有句型，可以出现在非终结符A后边的终结符的集合，记为FOLLOW(A)。</p><h3 id="求非终结符A的后继符号集算法："><a href="#求非终结符A的后继符号集算法：" class="headerlink" title="求非终结符A的后继符号集算法："></a>求非终结符A的后继符号集算法：</h3><ol><li>遍历文法所有的产生式，判断产生式右部中是否包含非终结符A</li><li>S -&gt; αAβ : 包含非终结符A，其中 α 和 β 都属于文法符号串，那么就将文法符号串β 的串首终结符集FIRST(β) 中除了空串ε外的所有终结符添加到FOLLOW(A)。如果FIRST(β)存在空串ε，那么就需要将FOLLOW(S) 也添加到FOLLOW(A)中。</li><li>S -&gt; αA : 包含非终结符A, 其中 α 属于文法符号串，那么将FOLLOW(S) 添加到FOLLOW(A)中。<br>如果非终结符 A 是产生式结尾，那么说明这个产生式左部非终结符后面能出现的终结符，也都可以出现在非终结符 A后面。</li><li>刚开始的时候，需要将结束符号 $ 添加到文法开始符号S 的后继符号集FOLLOW(S) 中。</li><li>后继符号集中是不会包含空串ε的。</li></ol><h2 id="可选集（Select"><a href="#可选集（Select" class="headerlink" title="可选集（Select)"></a>可选集（Select)</h2><ol><li>A→aβ : a 是终结符，β 是文法符号串，那么这个产生式的可选集SELECT(A→aβ) 就是这个终结符，即{a}。</li><li>A→ε : 空产生式对应的可选集SELECT(A→ε) 就是A的后继符号集，即 FOLLOW(A)。</li><li>A→Bβ : B 是非终结符，β 是文法符号串，那么这个产生式的可选集SELECT(A→Bβ) 就是文法符号串Bβ的串首终结符集，即FIRST(Bβ)。<br>注意，如果FIRST(Bβ)包含空串ε，即文法符号串Bβ能推导出空串ε，那么还要将Follow(A)添加到产生式对应的可选集中。</li></ol>]]></content>
    
    
    <categories>
      
      <category>编译原理</category>
      
      <category>语法分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编译原理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSM与MVC</title>
    <link href="/2021/11/18/SSM%E4%B8%8EMVC/"/>
    <url>/2021/11/18/SSM%E4%B8%8EMVC/</url>
    
    <content type="html"><![CDATA[<h1 id="SSM和MVC是什么"><a href="#SSM和MVC是什么" class="headerlink" title="SSM和MVC是什么"></a>SSM和MVC是什么</h1><p>SSM是指spring+springMVC+mybatis集成的框架；MVC是指model+view+controller</p><h1 id="各层的作用"><a href="#各层的作用" class="headerlink" title="各层的作用"></a>各层的作用</h1><h2 id="model（entity）层"><a href="#model（entity）层" class="headerlink" title="model（entity）层"></a>model（entity）层</h2><p>实体类，属性和数据表的属性保持一致</p><h2 id="service层"><a href="#service层" class="headerlink" title="service层"></a>service层</h2><p>存放业务逻辑，也是关于数据库的一些操作。但是并不是直接面对数据库，它有接口和接口的实现方法。在接口实现方法中，需要使用mapper（dao）层。这里的mapper和dao层的区别在下文有描述。mapper层是直接和数据库打交道的。它也是一个接口，只有方法和名字。<br>在实际开发中，service层提供我们实际使用的方法。当然，service之间可以互相调用</p><h2 id="mapper（dao-层"><a href="#mapper（dao-层" class="headerlink" title="mapper（dao)层"></a>mapper（dao)层</h2><p>使用mybatis逆向工程生成的mapper层，实际上就是dao层。对数据库进行持久化操作。（数据持久化操作就是指，把数据放到持久化的介质中，同时提供增删改查操作，比如数据通过hibernate插入到数据库中。）<br>dao层隐藏了这种实现细节，更换数据库或者文件或者内存，对调用dao的更高层来说不受影响。 mapper和dao不同，mapper的目的是为了把关系数据库映射成java类（对象）。 因此，如果只有mapper没有dao层，那么一旦项目需要把数据保存到文件或者内存，那么调用mapper的高层就会受到影响。 一般的项目可能只会使用数据库作为数据存储，所以mapper和dao可以说上就是一个东西了。</p><h2 id="controller层"><a href="#controller层" class="headerlink" title="controller层"></a>controller层</h2><p>控制器，导入service层。因为service中的方法是我们使用到的，controller通过接收前端传过来的参数进行业务操作，在返回一个指定的路径或者数据表。用户在view中发送数据到controller层，然后controller根据用户请求，决定使用什么视图和数据进行表示。在这个过程中，controller会使用到service的一些业务逻辑处理，也就是数据库的操作。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
      <category>springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>springboot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux实现进程通信的四种常见方式</title>
    <link href="/2021/11/09/linux%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%E7%9A%84%E5%9B%9B%E7%A7%8D%E5%B8%B8%E8%A7%81%E6%96%B9%E5%BC%8F/"/>
    <url>/2021/11/09/linux%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1%E7%9A%84%E5%9B%9B%E7%A7%8D%E5%B8%B8%E8%A7%81%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>在linux下实现进程通信</p><h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><h2 id="操作系统IPC类别"><a href="#操作系统IPC类别" class="headerlink" title="操作系统IPC类别"></a>操作系统IPC类别</h2><p>操作系统内部的 IPC基本分为三个类别：</p><ol><li>共享内存 - Shared Memory；</li><li>消息传递 - Message Passing Interface；</li><li>管道 - Pipe</li></ol><h2 id="常见的四种IPC实践"><a href="#常见的四种IPC实践" class="headerlink" title="常见的四种IPC实践"></a>常见的四种IPC实践</h2><p>四种单机 IPC 方式进行学习和手动实践：</p><ol><li>管道；</li><li>信号-Signal；</li><li>消息传递；</li><li>共享内存</li></ol><h1 id="开始实验"><a href="#开始实验" class="headerlink" title="开始实验"></a>开始实验</h1><p>在开始实验之前，我们的所有操作都在/drive下</p><h2 id="实验一：软中断实验"><a href="#实验一：软中断实验" class="headerlink" title="实验一：软中断实验"></a>实验一：软中断实验</h2><ol><li>输入命令<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#具体的c文件可以自己定义！</span><br>vim homework1.c<br></code></pre></div></td></tr></table></figure></li><li>编写代码<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;signal.h&gt;</span></span><br><span class="hljs-comment">//fvoid int_func(int sig);</span><br><span class="hljs-keyword">int</span> k;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">int_func</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sig)</span></span><br><span class="hljs-function"></span>&#123;<br>        k=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;int_func\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        signal(SIGINT,int_func);<br>        k=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span>(k==<span class="hljs-number">1</span>)&#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;hello!\n&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;OK!\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>保存之后输入下面的命令进行编译<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">gcc homework1.c -o homework1<br></code></pre></div></td></tr></table></figure></li><li>运行<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">./homework1<br></code></pre></div></td></tr></table></figure></li><li>运行结果<br><img src="%E5%AE%9E%E9%AA%8C1-1.png"><h2 id="实验二：用软中断实现父子进程同步"><a href="#实验二：用软中断实现父子进程同步" class="headerlink" title="实验二：用软中断实现父子进程同步"></a>实验二：用软中断实现父子进程同步</h2></li><li>输入命令<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#具体的c文件可以自己定义！</span><br>vim homework2.c<br></code></pre></div></td></tr></table></figure></li><li>编写代码<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;signal.h&gt;</span></span><br><span class="hljs-keyword">int</span> k1;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">int_fun1</span><span class="hljs-params">()</span></span>&#123;<br>        k1=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> k,p1;<br>        <span class="hljs-keyword">while</span>((p1=fork())==<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">if</span>(p1&gt;<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">for</span>(k=<span class="hljs-number">1</span>;k&lt;<span class="hljs-number">4</span>;k++)&#123;<br>                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;how are you!\n&quot;</span>);<br>                        sleep(<span class="hljs-number">1</span>);<span class="hljs-comment">//延时函数，延时一秒</span><br>                &#125;<br>                kill(p1,<span class="hljs-number">12</span>);<br>                wait(<span class="hljs-number">0</span>);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;OK!\n&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>                signal(<span class="hljs-number">12</span>,int_fun1);<br>                k1=<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">while</span>(k1==<span class="hljs-number">1</span>)<br>                &#123;<br>                        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i am child\n&quot;</span>);<br>                        sleep(<span class="hljs-number">1</span>);<br>                &#125;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Child exited!\n&quot;</span>);<br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>保存之后输入下面的命令进行编译<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">gcc homework2.c -o homework2<br></code></pre></div></td></tr></table></figure></li><li>运行<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">./homework2<br></code></pre></div></td></tr></table></figure></li><li>结果<br><img src="%E5%AE%9E%E9%AA%8C2-1.png"><h2 id="实验三：无名管道的使用"><a href="#实验三：无名管道的使用" class="headerlink" title="实验三：无名管道的使用"></a>实验三：无名管道的使用</h2></li><li>输入命令<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#具体的c文件可以自己定义！</span><br>vim homework3.c<br></code></pre></div></td></tr></table></figure></li><li>编写代码<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> p1,fd[<span class="hljs-number">2</span>];<br>        <span class="hljs-keyword">char</span> outpipe[<span class="hljs-number">50</span>];<span class="hljs-comment">//定义读缓冲区</span><br>        <span class="hljs-keyword">char</span> inpipe[<span class="hljs-number">50</span>];<span class="hljs-comment">//定义写缓冲区</span><br>        pipe(fd);<span class="hljs-comment">//创建无名管道fd</span><br>        <span class="hljs-keyword">while</span>((p1=fork())==<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">if</span>(p1==<span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-built_in">strcpy</span>(inpipe,<span class="hljs-string">&quot;this is a message!&quot;</span>);<br>                write(fd[<span class="hljs-number">1</span>],inpipe,<span class="hljs-number">50</span>);<span class="hljs-comment">//写信息到管道</span><br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><span class="hljs-comment">//父进程调用</span><br>        &#123;<br>                wait(<span class="hljs-number">0</span>);<br>                read(fd[<span class="hljs-number">0</span>],outpipe,<span class="hljs-number">50</span>);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>,outpipe);<span class="hljs-comment">//显示读到的信息</span><br>                <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>保存之后输入下面的命令进行编译<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">gcc homework3.c -o homework3<br></code></pre></div></td></tr></table></figure></li><li>运行<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">./homework3<br></code></pre></div></td></tr></table></figure></li><li>结果<br><img src="%E5%AE%9E%E9%AA%8C3-1.png"><h2 id="实验四：-消息队列通信"><a href="#实验四：-消息队列通信" class="headerlink" title="实验四： 消息队列通信"></a>实验四： 消息队列通信</h2></li><li>输入命令<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#具体的c文件可以自己定义！</span><br>vim Sndfile.c<br></code></pre></div></td></tr></table></figure></li><li>编写代码<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/msg.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXMSG 512</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">my_msg</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> my_msg_type;<br>  <span class="hljs-keyword">int</span> i;<br>  <span class="hljs-keyword">char</span> some_text[MAXMSG];<br>&#125;msg;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>  <span class="hljs-keyword">int</span> msgid;<br>  <span class="hljs-keyword">char</span> buffer[BUFSIZ];<br>  msgid=msgget(<span class="hljs-number">12</span>,<span class="hljs-number">0666</span> | IPC_CREAT);<span class="hljs-comment">//创建消息队列</span><br>  <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Enter some text&quot;</span>);<br>        fgets(buffer,BUFSIZ,<span class="hljs-built_in">stdin</span>);<br>        msg.i++;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i=%d\n&quot;</span>,msg.i);<br>        msg.my_msg_type=<span class="hljs-number">3</span>;<br>        <span class="hljs-built_in">strcpy</span>(msg.some_text,buffer);<br>        msgsnd(msgid,&amp;msg,MAXMSG,<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strncmp</span>(msg.some_text,<span class="hljs-string">&quot;end&quot;</span>,<span class="hljs-number">3</span>)==<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span>;<br><br>  &#125;<br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>保存之后输入下面的命令进行编译<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">gcc Sndfile.c -o Sndfile<br></code></pre></div></td></tr></table></figure></li><li>运行<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">./Sndfile<br></code></pre></div></td></tr></table></figure></li><li>输出内容<br><img src="%E5%AE%9E%E9%AA%8C4-1.png"></li><li>输入命令<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#具体的c文件可以自己定义！</span><br>vim Rcvfile.c<br></code></pre></div></td></tr></table></figure></li><li>编写代码<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/msg.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MAXMSG 512</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">my_msg</span></span><br><span class="hljs-class">&#123;</span><br>        <span class="hljs-keyword">long</span> <span class="hljs-keyword">int</span> my_msg_type;<br>        <span class="hljs-keyword">int</span> i;<br>        <span class="hljs-keyword">char</span> some_text[MAXMSG];<br>&#125;msg;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">int</span> msgid;<br>msg.my_msg_type=<span class="hljs-number">3</span>;<br>        <span class="hljs-comment">//char buuffer[BUFSIZ];</span><br>        msgid=msgget(<span class="hljs-number">12</span>,<span class="hljs-number">0666</span> | IPC_CREAT);<span class="hljs-comment">//创建消息队列</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>        msgrcv(msgid,&amp;msg,BUFSIZ,msg.my_msg_type,<span class="hljs-number">0</span>);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;you wrote:%s and i=%d\n&quot;</span>,msg.some_text,msg.i);<br>                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strncmp</span>(msg.some_text,<span class="hljs-string">&quot;end&quot;</span>,<span class="hljs-number">3</span>)==<span class="hljs-number">0</span>)<br>                        <span class="hljs-keyword">break</span>;<br>        &#125;<br>msgctl(msgid,IPC_RMID,<span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>输出内容<br><img src="%E5%AE%9E%E9%AA%8C4-2.png"></li></ol><h2 id="实验五：共享内存"><a href="#实验五：共享内存" class="headerlink" title="实验五：共享内存"></a>实验五：共享内存</h2><ol><li>编写代码<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">//Rcvshm.c</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/shm.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> shmid;<br>    <span class="hljs-keyword">char</span> *viraddr;<br>    shmid=shmget(<span class="hljs-number">1234</span>,BUFSIZ,<span class="hljs-number">0666</span> | IPC_CREAT);<span class="hljs-comment">//创建共享内存</span><br>    viraddr=(<span class="hljs-keyword">char</span> *) shmat(shmid,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">//附接到共享内存</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;your message is :%s&quot;</span>,viraddr);<br>    shmdt(viraddr);<br>    shmctl(shmid,IPC_RMID,<span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//Sndshm.c</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/shm.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> shmid;<br>    <span class="hljs-keyword">char</span> *viraddr;<br>    <span class="hljs-keyword">char</span> buffer[BUFSIZ];<br>    shmid=shmget(<span class="hljs-number">1234</span>,BUFSIZ,<span class="hljs-number">0666</span> | IPC_CREAT);<span class="hljs-comment">//创建共享内存</span><br>    viraddr=(<span class="hljs-keyword">char</span> *) shmat(shmid,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<span class="hljs-comment">//附接到共享内存</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Enter some text:&quot;</span>);<br>    fgets(buffer,BUFSIZ,<span class="hljs-built_in">stdin</span>);<span class="hljs-comment">//将标准输入送进缓冲区</span><br>    <span class="hljs-built_in">strcat</span>(viraddr,buffer);<span class="hljs-comment">//用追加的方式写共享内存</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">strncmp</span>(buffer,<span class="hljs-string">&quot;end&quot;</span>,<span class="hljs-number">3</span>)==<span class="hljs-number">0</span>)<span class="hljs-comment">//当输入的字符串是end的时候终止循环</span><br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    shmdt(viraddr);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li>实验结果<br><img src="%E5%AE%9E%E9%AA%8C5-1.png"><br><img src="%E5%AE%9E%E9%AA%8C5-2.png"></li></ol><h2 id="实验六：pv操作-以下代码参考超超博客，友链中有博客地址"><a href="#实验六：pv操作-以下代码参考超超博客，友链中有博客地址" class="headerlink" title="实验六：pv操作(以下代码参考超超博客，友链中有博客地址)"></a>实验六：pv操作(以下代码参考超超博客，友链中有博客地址)</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/shm.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/ipc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/wait.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> RESOURCESNUM 4096</span><br><br><span class="hljs-comment">//函数声明</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">attach_shm</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//绑定共享内存</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">detach_shm</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//解绑共享内存</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">P</span><span class="hljs-params">(<span class="hljs-keyword">short</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> num)</span></span>;<span class="hljs-comment">//对某个信号量进行p操作</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">V</span><span class="hljs-params">(<span class="hljs-keyword">short</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> num)</span></span>;<span class="hljs-comment">//对某个信号量进行v操作</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">readMessage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<span class="hljs-comment">//读取数据，id为0，表示A在操作，id为2，表示B在操作</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">writeMessage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>;<span class="hljs-comment">//写入数据，id为0，表示A在操作，id为2，表示B在操作</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">A</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//进程A</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">B</span><span class="hljs-params">()</span></span>;<span class="hljs-comment">//进程B</span><br><br><br><span class="hljs-comment">//数据结构声明</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Buffer</span>&#123;</span><br>    <span class="hljs-comment">//共享内存缓冲区资源的循环队列</span><br>    <span class="hljs-keyword">int</span> message[RESOURCESNUM];<br>    <span class="hljs-keyword">int</span> f;<br>    <span class="hljs-keyword">int</span> r;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">semun</span>&#123;</span><br>    <span class="hljs-comment">//信号量数据结构</span><br>    <span class="hljs-keyword">int</span> value;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">MUTEX</span>&#123;</span><br>    <span class="hljs-comment">//信号量集</span><br>    SA,               <span class="hljs-comment">//M1操作的信号量</span><br>    SB,               <span class="hljs-comment">//M2操作的信号量</span><br>    S                 <span class="hljs-comment">//信号量相关信号量</span><br>&#125;;<br><br><span class="hljs-comment">//公共变量声明</span><br><span class="hljs-keyword">int</span> semid;<span class="hljs-comment">//信号量集合描述符</span><br><span class="hljs-keyword">int</span> shmid[<span class="hljs-number">2</span>];<span class="hljs-comment">//共享空间描述符，M1,M2各占一个空间</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Buffer</span> *<span class="hljs-title">shm</span>[2];</span><span class="hljs-comment">//共享空间首地址</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Buffer</span> <span class="hljs-title">M</span>[2];</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> <span class="hljs-keyword">const</span> *argv[])</span></span>&#123;<br>    <span class="hljs-comment">//记录父进程pid</span><br>    <span class="hljs-keyword">pid_t</span> ppid = <span class="hljs-built_in">getpid</span>();<br>    <span class="hljs-comment">//信号集名字，信号集中信号量的个数，信号量集合的权限</span><br>    semid = <span class="hljs-built_in">semget</span>((<span class="hljs-keyword">key_t</span>)<span class="hljs-number">1234</span>, S, IPC_CREAT | <span class="hljs-number">0600</span>); <span class="hljs-comment">//创建信号量</span><br>    <span class="hljs-keyword">if</span> (semid == <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-built_in">perror</span>(<span class="hljs-string">&quot;semget&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 初始化信号量</span><br>    <span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">semun</span> <span class="hljs-title">s</span>;</span><br>    <span class="hljs-comment">//初始时，允许A执行</span><br>    s.value = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">semctl</span>(semid, SA, SETVAL, s);<br>    <span class="hljs-comment">//初始时，不允许B执行</span><br>    s.value = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">semctl</span>(semid, SB, SETVAL, s);<br><br>    <span class="hljs-comment">//创建共享内存</span><br>    shmid[<span class="hljs-number">0</span>] = <span class="hljs-built_in">shmget</span>((<span class="hljs-keyword">key_t</span>)<span class="hljs-number">1234</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(M[<span class="hljs-number">0</span>]), <span class="hljs-number">0666</span> | IPC_CREAT);<br>    shmid[<span class="hljs-number">1</span>] = <span class="hljs-built_in">shmget</span>((<span class="hljs-keyword">key_t</span>)<span class="hljs-number">5678</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(M[<span class="hljs-number">1</span>]), <span class="hljs-number">0666</span> | IPC_CREAT);<br><br>    <span class="hljs-keyword">if</span> (shmid[<span class="hljs-number">0</span>] == <span class="hljs-number">-1</span> || shmid[<span class="hljs-number">1</span>] == <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;shmget failed\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br>    <span class="hljs-built_in">attach_shm</span>();<br>    <span class="hljs-comment">//初始化共享内存</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)&#123;<br>        <span class="hljs-built_in">memset</span>(shm[i]-&gt;message, <span class="hljs-number">0</span>, <span class="hljs-built_in"><span class="hljs-keyword">sizeof</span></span>(shm[i]-&gt;message));<br>        shm[i]-&gt;f = <span class="hljs-number">0</span>;<br>        shm[i]-&gt;r = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">//创建3个进程：1个父进程 + 1个A + 1个B</span><br>    <span class="hljs-keyword">pid_t</span> child_pid[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++)&#123;<br>        child_pid[i] = fork();<br>        <span class="hljs-comment">//子进程</span><br>        <span class="hljs-keyword">if</span> (child_pid[i] == <span class="hljs-number">0</span>) <br>        &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//A</span><br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">A</span>();<br>    &#125;<br>    <span class="hljs-comment">//B</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">B</span>();<br>    &#125;<br><span class="hljs-comment">//父进程</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">getpid</span>() == ppid) &#123;<br>        <span class="hljs-comment">//等待子进程结束</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>            <span class="hljs-built_in">waitpid</span>(child_pid[i], <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br>        &#125;<br>        <span class="hljs-built_in">detach_shm</span>();<br>        <span class="hljs-comment">//删除共享内存</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">shmctl</span>(shmid[<span class="hljs-number">0</span>], IPC_RMID, <span class="hljs-number">0</span>) == <span class="hljs-number">-1</span> || <span class="hljs-built_in">shmctl</span>(shmid[<span class="hljs-number">1</span>], IPC_RMID, <span class="hljs-number">0</span>) == <span class="hljs-number">-1</span>)&#123;<br>            <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;shmctl(IPC_RMID) failed\n&quot;</span>);<br>            <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">attach_shm</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//将共享内存连接到当前进程的地址空间</span><br>    shm[<span class="hljs-number">0</span>] = (struct Buffer *)<span class="hljs-built_in">shmat</span>(shmid[<span class="hljs-number">0</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br>    shm[<span class="hljs-number">1</span>] = (struct Buffer *)<span class="hljs-built_in">shmat</span>(shmid[<span class="hljs-number">1</span>], <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (shm[<span class="hljs-number">0</span>] == (struct Buffer *)<span class="hljs-number">-1</span> || shm[<span class="hljs-number">1</span>] == (struct Buffer *)<span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;shmat failed\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">detach_shm</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-comment">//把共享内存从当前进程中分离</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">shmdt</span>((<span class="hljs-keyword">void</span> *)shm[<span class="hljs-number">0</span>]) == <span class="hljs-number">-1</span> || <span class="hljs-built_in">shmdt</span>((<span class="hljs-keyword">void</span> *)shm[<span class="hljs-number">1</span>]) == <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;shmdt failed\n&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(EXIT_FAILURE);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">关于sembuf的结构以及属性的具体含义如下：</span><br><span class="hljs-comment">    struct sembuf&#123;</span><br><span class="hljs-comment">        short sem_num;//除非使用一组信号量，否则它为0</span><br><span class="hljs-comment">        short sem_op;//信号量在一次操作中需要改变的数据，通常是两个数，一个是-1，即P（等待）操作，</span><br><span class="hljs-comment">                        //一个是+1，即V（发送信号）操作。</span><br><span class="hljs-comment">        short sem_flg;//通常为SEM_UNDO,使操作系统跟踪信号，</span><br><span class="hljs-comment">                        //并在进程没有释放该信号量而终止时，操作系统释放信号量</span><br><span class="hljs-comment">    &#125;;</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">P</span><span class="hljs-params">(<span class="hljs-keyword">short</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> num)</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sembuf</span> <span class="hljs-title">sb</span> =</span>&#123;num, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-comment">//修改集合中，一个或多个信号量值</span><br>    <span class="hljs-built_in">semop</span>(semid, &amp;sb, <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">V</span><span class="hljs-params">(<span class="hljs-keyword">short</span> <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> num)</span></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sembuf</span> <span class="hljs-title">sb</span> =</span> &#123;num, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-built_in">semop</span>(semid, &amp;sb, <span class="hljs-number">1</span>);<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">readMessage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>&#123;<br>    <span class="hljs-comment">// id = 0，读取M[1]，id = 1，读取M[0]</span><br>    <span class="hljs-keyword">int</span> message = <span class="hljs-number">0</span>;<br>    message = shm[-id + <span class="hljs-number">1</span>]-&gt;message[shm[-id + <span class="hljs-number">1</span>]-&gt;f];<br>    shm[-id + <span class="hljs-number">1</span>]-&gt;f = (shm[-id + <span class="hljs-number">1</span>]-&gt;f + <span class="hljs-number">1</span>) % RESOURCESNUM;<br>    <span class="hljs-comment">// printf(&quot;M%d -&gt; f = %d\n&quot;, -id + 2, shm[-id + 1]-&gt;f);</span><br>    <span class="hljs-keyword">return</span> message;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">writeMessage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span></span>&#123;<br>    <span class="hljs-comment">//随机生成一个范围在[1,4096]的message</span><br>    <span class="hljs-keyword">int</span> message = <span class="hljs-built_in">rand</span>() % <span class="hljs-number">4096</span> + <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//id为0，向M[0]写入，id为1，向M[1]写入</span><br>    shm[id]-&gt;message[shm[id]-&gt;r] = message;<br>    shm[id]-&gt;r = (shm[id]-&gt;r + <span class="hljs-number">1</span>) % RESOURCESNUM;<br>    <span class="hljs-comment">// printf(&quot;M%d -&gt; r = %d\n&quot;, id + 1, shm[id]-&gt;r);</span><br>    <span class="hljs-keyword">return</span> message;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">A</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">attach_shm</span>();<br><span class="hljs-comment">//这里让A执行5次</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> m = <span class="hljs-number">0</span>; m &lt; <span class="hljs-number">5</span>; m++)&#123;<br>        <span class="hljs-built_in">P</span>(SA);<br>        <span class="hljs-comment">//countOfM1：当前M1中元素个数(队列，求队列中元素的个数)</span><br>        <span class="hljs-keyword">int</span> countOfM1 = (shm[<span class="hljs-number">0</span>]-&gt;r - shm[<span class="hljs-number">0</span>]-&gt;f + RESOURCESNUM) % RESOURCESNUM;<br>        <span class="hljs-comment">//currentResidueNum：当前最多写入个数</span><br>        <span class="hljs-keyword">int</span> currentResidueNum = RESOURCESNUM - countOfM1;<br>        <span class="hljs-comment">//每次添加的数量不超过10</span><br>        <span class="hljs-keyword">int</span> randInt = <span class="hljs-built_in">rand</span>() % <span class="hljs-number">10</span> + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> times = randInt;<br>        <span class="hljs-comment">//如果当前最多写入个数小于10，那就写当前最多写入个数</span><br>        <span class="hljs-keyword">if</span>(currentResidueNum&lt;<span class="hljs-number">10</span>)&#123;<br>            times=currentResidueNum;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; times; i++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A：发送常规信息到 M1 ，信息为%d\n&quot;</span>, <span class="hljs-built_in">writeMessage</span>(<span class="hljs-number">0</span>));<br>        &#125;<br>        <span class="hljs-comment">//最开始M2是为空的，因为B没有向里面写数据。所以只在M2有消息的时候才读取</span><br>        <span class="hljs-keyword">if</span> (shm[<span class="hljs-number">1</span>]-&gt;f != shm[<span class="hljs-number">1</span>]-&gt;r)&#123;<br>            <span class="hljs-comment">//当前M2中元素个数(队列，求队列中元素的个数)</span><br>            <span class="hljs-keyword">int</span> countOfM2 = (shm[<span class="hljs-number">1</span>]-&gt;r - shm[<span class="hljs-number">1</span>]-&gt;f + RESOURCESNUM) % RESOURCESNUM;<br>            <span class="hljs-comment">//随机读取，但是不能够超过M2中有的数量</span><br>            <span class="hljs-keyword">int</span> times = <span class="hljs-built_in">rand</span>() % countOfM2 + <span class="hljs-number">1</span>;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; times; i++)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;A 从 M2 中消费控制信息，信息为 %d \n&quot;</span>, <span class="hljs-built_in">readMessage</span>(<span class="hljs-number">0</span>));<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;M2中没有信息！ \n&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">V</span>(SB);<br>    &#125;<br>    <span class="hljs-built_in">detach_shm</span>();<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">B</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">attach_shm</span>();<br>    <span class="hljs-comment">//这里让B执行5次</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> m = <span class="hljs-number">0</span>; m &lt; <span class="hljs-number">5</span>; m++)&#123;<br>        <span class="hljs-built_in">P</span>(SB);<br>        <span class="hljs-comment">//当前M2中元素个数</span><br>        <span class="hljs-keyword">int</span> countOfM2 = (shm[<span class="hljs-number">0</span>]-&gt;r - shm[<span class="hljs-number">0</span>]-&gt;f + RESOURCESNUM) % RESOURCESNUM;<br>        <span class="hljs-comment">//currentResidueNum：当前最多写入个数</span><br>        <span class="hljs-keyword">int</span> currentResidueNum = RESOURCESNUM - countOfM2;<br>        <span class="hljs-comment">//取一个小于10的随机数</span><br>        <span class="hljs-keyword">int</span> randInt = <span class="hljs-built_in">rand</span>() % <span class="hljs-number">10</span> + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> times = randInt;<br>        <span class="hljs-comment">//如果当前剩余位置小于10</span><br>        <span class="hljs-keyword">if</span>(currentResidueNum&lt;<span class="hljs-number">10</span>)&#123;<br>            times=currentResidueNum;<br>        &#125;<br>        <br>        <span class="hljs-comment">//向M2写times个信息</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; times; i++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;B 发送控制信息到 M2 ，信息为%d\n&quot;</span>, <span class="hljs-built_in">writeMessage</span>(<span class="hljs-number">1</span>));<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> countOfM1 = (shm[<span class="hljs-number">0</span>]-&gt;r - shm[<span class="hljs-number">0</span>]-&gt;f + RESOURCESNUM) % RESOURCESNUM;<br>        <span class="hljs-comment">//随机读取，但是不能够超过M2中有的数量</span><br>        times = <span class="hljs-built_in">rand</span>() % countOfM1 + <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">//消费信息，B消费M1中的信息，但是不能超过M1拥有的信息数量</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; times; i++)&#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;B 从 M1 中消费常规信息，信息为 %d \n&quot;</span>, <span class="hljs-built_in">readMessage</span>(<span class="hljs-number">1</span>));<br>        &#125;<br><br>        <span class="hljs-built_in">V</span>(SA);<br>    &#125;<br>    <span class="hljs-built_in">detach_shm</span>();<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>对linux的底层理解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux添加内核模块（实现系统调用）</title>
    <link href="/2021/11/09/%E6%B7%BB%E5%8A%A0%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%EF%BC%88%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E8%B0%83%E7%94%A8%EF%BC%89/"/>
    <url>/2021/11/09/%E6%B7%BB%E5%8A%A0%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%EF%BC%88%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E8%B0%83%E7%94%A8%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>在向linux内核中添加一个内核模块之前，需要了解进程调用。</p><h1 id="一些预备知识"><a href="#一些预备知识" class="headerlink" title="一些预备知识"></a>一些预备知识</h1><h2 id="进程调用"><a href="#进程调用" class="headerlink" title="进程调用"></a>进程调用</h2><p>它是应用程序和操作系统内核进行交互的最直接、最原始的接口和通道。在遵循一定的规则下，它让进程可以享受到操作系统内核提供的服务，例如申请 I/O 资源以访问相关的硬件、申请共享内存以用于 IPC 等等。<br>系统调用在我们的程序运行中，经常被直接或者间接使用到。我们在程序中经常用到的库函数，大部分是对相关系统调用的进一步抽象和封装，以提高系统调用的使用便利性，例如：在 C/C++语言里，分配虚拟内存的函数 malloc()，实质上是基于晦涩难懂的系统调用brk()/sbrk()而构造的。<br>一旦一个应用程序执行系统调用成功，其 CPU 运行状态将发生变化，由用户层的 Ring3 转移至内核层的 Ring 0（大家可以去搜索一下 X86 体系结构下的 Ring 3 和 Ring 0 的概念，简单来说，内核层次的代码为特权指令，只能在 CPU 的 Ring 0 状态下运行）。如果系统调用顺利完成，CPU 则会由 Ring 0 状态切换回至 Ring 3 状态。<br><strong>添加内核模块</strong>的目的，就是增加一个自己设计的系统调用，并让对应的进程运行在此新内核之上，享受到该系统调用所提供的（简单）服务。</p><h2 id="内核模块"><a href="#内核模块" class="headerlink" title="内核模块"></a>内核模块</h2><p>内核模块的编写方式不同于大家在应用层的程序编写方式——main 函数——从头到尾写下去，而是有其固定的编程框架。一般在通过一个特别的 makefile 文件对其编译成功后，会输出后缀名为 ko 的内核模块文件，再利用 insmod 命令将其加载进正在运行的内核即可。（还有一种静态方法可以添加进程调用——源码，找到对应的源码位置，加入新系统调用的入口和相关执行逻辑，之后，重新编译和安装整个新内核）<br>**最后，请注意，此内核模块的功能是：从真正意义上为当前操作系统设计一个新的系统调用（在此内核模块的源码里有相应的加入“新系统调用“的程序语句），然后供上层应用程序所使用（你的应用程序调用了此”接口“），绝不是在内核模块的加载过程中简单地用 printk 来进行一次字符串输出。 **</p><h1 id="正文（添加内核模块）"><a href="#正文（添加内核模块）" class="headerlink" title="正文（添加内核模块）"></a>正文（添加内核模块）</h1><h2 id="1-查看syscall-table"><a href="#1-查看syscall-table" class="headerlink" title="1.查看syscall_table"></a>1.查看syscall_table</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo cat /proc/kallsyms | grep sys_call_table<br></code></pre></div></td></tr></table></figure><p><img src="syscall_table.png"><br>可以发现，syscall_table的地址是ffffffffb82013a0</p><h2 id="2-查看可用的系统调用号"><a href="#2-查看可用的系统调用号" class="headerlink" title="2. 查看可用的系统调用号"></a>2. 查看可用的系统调用号</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">vim /usr/include/asm/unistd_32.h<br></code></pre></div></td></tr></table></figure><p>我使用的是384号。</p><h2 id="3-创建c文件和Makefile文件"><a href="#3-创建c文件和Makefile文件" class="headerlink" title="3. 创建c文件和Makefile文件"></a>3. 创建c文件和Makefile文件</h2><h3 id="1-在任意位置创建一个文件夹"><a href="#1-在任意位置创建一个文件夹" class="headerlink" title="1. 在任意位置创建一个文件夹"></a>1. 在任意位置创建一个文件夹</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mkdir /LKM<br></code></pre></div></td></tr></table></figure><h3 id="2-然后进入文件夹"><a href="#2-然后进入文件夹" class="headerlink" title="2. 然后进入文件夹"></a>2. 然后进入文件夹</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /LKM<br></code></pre></div></td></tr></table></figure><h3 id="3-新建c文件，我新建的是zengshangren20192333011-c"><a href="#3-新建c文件，我新建的是zengshangren20192333011-c" class="headerlink" title="3. 新建c文件，我新建的是zengshangren20192333011.c"></a>3. 新建c文件，我新建的是zengshangren20192333011.c</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#创建文件命令：</span><br>vim zengshangren20192333011.c<br></code></pre></div></td></tr></table></figure><p>代码如下，注意在对应地方修改成自己的信息！</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/init.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/module.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;linux/sched.h&gt;</span></span><br>  <br>MODULE_LICENSE(<span class="hljs-string">&quot;Dual BSD/GPL&quot;</span>);<br> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SYS_CALL_TABLE_ADDRESS 0xffffffffb82013a0   <span class="hljs-comment">//sys_call_table对应的地址</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NUM 384  <span class="hljs-comment">//系统调用号为384</span></span><br><span class="hljs-keyword">int</span> orig_cr0;  <span class="hljs-comment">//用来存储cr0寄存器原来的值</span><br><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> *sys_call_table_my=<span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-title">int</span><span class="hljs-params">(*anything_saved)</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>;  <span class="hljs-comment">//定义一个函数指针，用来保存一个系统调用</span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">clear_cr0</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> <span class="hljs-comment">//使cr0寄存器的第17位设置为0（内核空间可写）</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> cr0=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> ret;<br>    <span class="hljs-function"><span class="hljs-keyword">asm</span> <span class="hljs-title">volatile</span><span class="hljs-params">(<span class="hljs-string">&quot;movq %%cr0,%%rax&quot;</span>:<span class="hljs-string">&quot;=a&quot;</span>(cr0))</span></span>;<span class="hljs-comment">//将cr0寄存器的值移动到eax寄存器中，同时输出到cr0变量中</span><br>    ret=cr0;<br>    cr0&amp;=<span class="hljs-number">0xfffffffffffeffff</span>;<span class="hljs-comment">//将cr0变量值中的第17位清0,将修改后的值写入cr0寄存器</span><br>    <span class="hljs-function"><span class="hljs-keyword">asm</span> <span class="hljs-title">volatile</span><span class="hljs-params">(<span class="hljs-string">&quot;movq %%rax,%%cr0&quot;</span>::<span class="hljs-string">&quot;a&quot;</span>(cr0))</span></span>;<span class="hljs-comment">//将cr0变量的值作为输入，输入到寄存器eax中，同时移动到寄存器cr0中</span><br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setback_cr0</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span> <span class="hljs-comment">//使cr0寄存器设置为内核不可写</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">asm</span> <span class="hljs-title">volatile</span><span class="hljs-params">(<span class="hljs-string">&quot;movq %%rax,%%cr0&quot;</span>::<span class="hljs-string">&quot;a&quot;</span>(val))</span></span>;<br>&#125;<br> <br><span class="hljs-function">asmlinkage <span class="hljs-keyword">long</span> <span class="hljs-title">sys_mycall</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> <span class="hljs-comment">//定义自己的系统调用</span></span><br><span class="hljs-function"></span>&#123;   <br>    printk(<span class="hljs-string">&quot;模块系统调用-当前pid：%d，当前comm:%s\n&quot;</span>,current-&gt;pid,current-&gt;comm);<br>    printk(<span class="hljs-string">&quot;学号：20192333011\n姓名：曾尚仁\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> current-&gt;pid;    <br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> __init <span class="hljs-title">call_init</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    sys_call_table_my=(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>*)(SYS_CALL_TABLE_ADDRESS);<br>    printk(<span class="hljs-string">&quot;call_init......\n&quot;</span>);<br>    anything_saved=(<span class="hljs-keyword">int</span>(*)(<span class="hljs-keyword">void</span>))(sys_call_table_my[NUM]);<span class="hljs-comment">//保存系统调用表中的NUM位置上的系统调用</span><br>    orig_cr0=clear_cr0();<span class="hljs-comment">//使内核地址空间可写</span><br>    sys_call_table_my[NUM]=(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>) &amp;sys_mycall;<span class="hljs-comment">//用自己的系统调用替换NUM位置上的系统调用</span><br>    setback_cr0(orig_cr0);<span class="hljs-comment">//使内核地址空间不可写</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> __exit <span class="hljs-title">call_exit</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    printk(<span class="hljs-string">&quot;call_exit......\n&quot;</span>);<br>    orig_cr0=clear_cr0();<br>    sys_call_table_my[NUM]=(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span>)anything_saved;<span class="hljs-comment">//将系统调用恢复</span><br>    setback_cr0(orig_cr0);<br>&#125;<br> <br>module_init(call_init);<br>module_exit(call_exit);<br></code></pre></div></td></tr></table></figure><h3 id="4-新建Makefile文件，注意第一个字母一定要大写！"><a href="#4-新建Makefile文件，注意第一个字母一定要大写！" class="headerlink" title="4. 新建Makefile文件，注意第一个字母一定要大写！"></a>4. 新建Makefile文件，注意第一个字母一定要大写！</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">obj-m += zengshangren20192333011.o<br>KERNELBUILD +=/usr/src/linux-headers-5.4.0-88-generic<br>all:<br>        make -C <span class="hljs-variable">$&#123;KERNELBUILD&#125;</span> M=<span class="hljs-variable">$&#123;shell pwd&#125;</span> modules<br>clean:<br>        rm -f *.ko *.o *.mod.o *mod.c *.symvers<br>CONFIG_MODULE_SIG=n<br></code></pre></div></td></tr></table></figure><p>注意：</p><ul><li>最后一句CONFIG_MODULE_SIG=n，是由于Linux内核3.7之后添加了内核签名机制，现在的内核只加载带有公钥的合法模块，因此可以尝试引入公钥mokutil –import public_key.der。当然，为了方便，Linux中默认CONFIG_MODULE_SIG = y即签名开启状态，因此可以在内核代码的config文件中找到并将其改为CONFIG_MODULE_SIG = n<br>这样就不会报错啦。如果有时间还是要学一学如何签名。</li><li>注意Makefile的大写字母M</li></ul><h2 id="4-编译Makefile文件"><a href="#4-编译Makefile文件" class="headerlink" title="4. 编译Makefile文件"></a>4. 编译Makefile文件</h2><p>直接在/LKM下输入命令“make”</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">make<br></code></pre></div></td></tr></table></figure><h2 id="5-添加、移除模块"><a href="#5-添加、移除模块" class="headerlink" title="5. 添加、移除模块"></a>5. 添加、移除模块</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#添加模块</span><br>insmod zengshangren20192333011.ko<br><br><span class="hljs-comment">#移除模块</span><br>rmmod zengshangren20192333011.ko<br></code></pre></div></td></tr></table></figure><h2 id="6-如何查看模块是否被添加？"><a href="#6-如何查看模块是否被添加？" class="headerlink" title="6. 如何查看模块是否被添加？"></a>6. 如何查看模块是否被添加？</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">lsmod<br></code></pre></div></td></tr></table></figure><p><img src="insertSuccess.png"></p><h2 id="7-在应用层调用"><a href="#7-在应用层调用" class="headerlink" title="7. 在应用层调用"></a>7. 在应用层调用</h2><p>编写homework.c</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/syscall.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>        <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">long</span> x = <span class="hljs-number">0</span>;<br>        x = syscall(<span class="hljs-number">384</span>);        <span class="hljs-comment">//测试384号系统调用</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;zengshangren syscall : %ld\n&quot;</span>, x);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><h2 id="8-编译并运行"><a href="#8-编译并运行" class="headerlink" title="8. 编译并运行"></a>8. 编译并运行</h2><p>！<a href="gccHomework.png"></a></p><h2 id="查看是否添加成功"><a href="#查看是否添加成功" class="headerlink" title="查看是否添加成功"></a>查看是否添加成功</h2><p>输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">dmesg<br></code></pre></div></td></tr></table></figure><p>结果如下<br><img src="result.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>远程连接linux运行jar包，在关闭终端后jar包停止运行怎么办？</title>
    <link href="/2021/11/08/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5linux%E8%BF%90%E8%A1%8Cjar%E5%8C%85%EF%BC%8C%E5%9C%A8%E5%85%B3%E9%97%AD%E7%BB%88%E7%AB%AF%E5%90%8Ejar%E5%8C%85%E5%81%9C%E6%AD%A2%E8%BF%90%E8%A1%8C%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/"/>
    <url>/2021/11/08/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5linux%E8%BF%90%E8%A1%8Cjar%E5%8C%85%EF%BC%8C%E5%9C%A8%E5%85%B3%E9%97%AD%E7%BB%88%E7%AB%AF%E5%90%8Ejar%E5%8C%85%E5%81%9C%E6%AD%A2%E8%BF%90%E8%A1%8C%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>普通运行jar包的命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#使用这种方式，在远程连接的窗口关闭后，这个jar包开启的进程也随之关闭</span><br>java -jar xxx.jar <br></code></pre></div></td></tr></table></figure><p>解决方法1：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#使用这种方式表示ssh窗口不被锁定，但是关闭窗口的时候，程序还是会退出</span><br>java -jar xxx.jar &amp;<br></code></pre></div></td></tr></table></figure><p>解决方法2：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#使用这种方式表示不挂断运行命令行，当账号退出或者关闭终端的时候，程序仍然运行</span><br><span class="hljs-comment">#当用nohup命令执行jar的时候，改作业所有输出被重定向到nohup.out的文件中，除非指定另外的输出文件</span><br>nohup java -jar xxx.jar &amp;<br></code></pre></div></td></tr></table></figure><p>解决方法3：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#表示把所有的启动日志 记录到temp.txt文件中</span><br>nohup java -jar xxx.jar &gt;/usr/<span class="hljs-built_in">local</span>/temp.txt &amp;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>常见应用的安装与使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker下载太慢，更换镜像源</title>
    <link href="/2021/11/07/docker%E4%B8%8B%E8%BD%BD%E5%A4%AA%E6%85%A2%EF%BC%8C%E6%9B%B4%E6%8D%A2%E9%95%9C%E5%83%8F%E6%BA%90/"/>
    <url>/2021/11/07/docker%E4%B8%8B%E8%BD%BD%E5%A4%AA%E6%85%A2%EF%BC%8C%E6%9B%B4%E6%8D%A2%E9%95%9C%E5%83%8F%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h1 id="比较快的镜像源"><a href="#比较快的镜像源" class="headerlink" title="比较快的镜像源"></a>比较快的镜像源</h1><table><thead><tr><th>网站</th><th>网址</th></tr></thead><tbody><tr><td>网易云</td><td><a href="https://hub-mirror.c.163.com/">https://hub-mirror.c.163.com</a></td></tr><tr><td>百度云</td><td><a href="https://mirror.baidubce.com/">https://mirror.baidubce.com</a></td></tr><tr><td>阿里云</td><td><a href="https://ustc-edu-cn.mirror.aliyuncs.com/">https://ustc-edu-cn.mirror.aliyuncs.com</a></td></tr></tbody></table><h1 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h1><p>编辑 /etc/docker/daemon.json 配置文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">创建配置文件目录<br>$ sudo mkdir /etc/docker<br><br>编辑配置文件，如果文件不存在，需要自己创建一个。<br>$ sudo vim /etc/docker/daemon.json<br><br>将配置信息粘贴到配置文件中，配置信息为 json 格式，可以根据实际需要设置多个国内的镜像服务器。<br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br><span class="hljs-string">&quot;https://ustc-edu-cn.mirror.aliyuncs.com&quot;</span><br>  ]<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="重启docker服务"><a href="#重启docker服务" class="headerlink" title="重启docker服务"></a>重启docker服务</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo systemctl daemon-reload <br>$ sudo systemctl restart docker<br></code></pre></div></td></tr></table></figure><h1 id="查看镜像源"><a href="#查看镜像源" class="headerlink" title="查看镜像源"></a>查看镜像源</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo docker info<br></code></pre></div></td></tr></table></figure><p>如果看到相关网址已经更改即修改成功！</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>常见应用的安装与使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux|ubuntu 安装jdk</title>
    <link href="/2021/11/07/linux%E4%B8%8B%E5%AE%89%E8%A3%85jdk/"/>
    <url>/2021/11/07/linux%E4%B8%8B%E5%AE%89%E8%A3%85jdk/</url>
    
    <content type="html"><![CDATA[<h1 id="jdk的安装目录"><a href="#jdk的安装目录" class="headerlink" title="jdk的安装目录"></a>jdk的安装目录</h1><p>linux中最标准的java jdk安装目录是：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">/usr/<span class="hljs-built_in">local</span>/java/<br></code></pre></div></td></tr></table></figure><p>在/usr/local下创建一个名为java的文件夹</p><h1 id="下载jdk"><a href="#下载jdk" class="headerlink" title="下载jdk"></a>下载jdk</h1><p><strong>一、去官网选择自己所需的jdk</strong><br>官网地址：<a href="https://www.oracle.com/java/technologies/downloads/">下载地址</a></p><p>例如，我选择的是jdk17<br><img src="https://img-blog.csdnimg.cn/e05848f9b4a84b4da5f2ccbc6c5d4c7a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pu-5bCa5LuB,size_20,color_FFFFFF,t_70,g_se,x_16" alt="选择合适的jdk"><br><strong>二、复制红框的链接。</strong><br>复制红框的链接后，进入linux系统中/usr/local/java/<br>然后敲如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.tar.gz<br></code></pre></div></td></tr></table></figure><p>注意，wget后面的链接是你刚刚复制的链接！</p><h1 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h1><p><strong>一、解压</strong><br>下载了上面的jdk后，会在/usr/local/java中看见这个文件，随后解压：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">tar zxf xxx.tar.gz <br></code></pre></div></td></tr></table></figure><p>xxx修改成对应的包的文件名即可<br>解压成功后可以删除这个包</p><p><strong>二、配置环境变量</strong><br>修改相关配置文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">vim /etc/profile<br></code></pre></div></td></tr></table></figure><p>打开文件后再末尾添加：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> JAVA17_HOME=/jdk17/jdk-17.0.1<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA17_HOME</span>/bin<br></code></pre></div></td></tr></table></figure><p>注意修改对应的版本。我这里是17。<br>最后输入命令让配置文件生效：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></div></td></tr></table></figure><p><strong>三、查看java版本</strong><br>输入命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">java -version<br></code></pre></div></td></tr></table></figure><p>查看到对应java版本即安装结束</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
      <category>常见应用的安装与使用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
