<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>添加内核模块（实现进程调用）</title>
    <link href="/2021/11/09/%E6%B7%BB%E5%8A%A0%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%EF%BC%88%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E8%B0%83%E7%94%A8%EF%BC%89/"/>
    <url>/2021/11/09/%E6%B7%BB%E5%8A%A0%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%EF%BC%88%E5%AE%9E%E7%8E%B0%E8%BF%9B%E7%A8%8B%E8%B0%83%E7%94%A8%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>在向linux内核中添加一个内核模块之前，需要了解进程调用。</p><h1 id="一些预备知识"><a href="#一些预备知识" class="headerlink" title="一些预备知识"></a>一些预备知识</h1><h2 id="进程调用"><a href="#进程调用" class="headerlink" title="进程调用"></a>进程调用</h2><div class="hljs code-wrapper"><pre><code>    它是应用程序和操作系统内核进行交互的最直接、最原始的接口和通道。在遵循一定的规则下，它让进程可以享受到操作系统内核提供的服务，例如申请 I/O 资源以访问相关的硬件、申请共享内存以用于 IPC 等等。    系统调用在我们的程序运行中，经常被直接或者间接使用到。我们在程序中经常用到的库函数，大部分是对相关系统调用的进一步抽象和封装，以提高系统调用的使用便利性，例如：在 C/C++语言里，分配虚拟内存的函数 malloc()，实质上是基于晦涩难懂的系统调用brk()/sbrk()而构造的。    一旦一个应用程序执行系统调用成功，其 CPU 运行状态将发生变化，由用户层的 Ring3 转移至内核层的 Ring 0（大家可以去搜索一下 X86 体系结构下的 Ring 3 和 Ring 0 的概念，简单来说，内核层次的代码为特权指令，只能在 CPU 的 Ring 0 状态下运行）。如果系统调用顺利完成，CPU 则会由 Ring 0 状态切换回至 Ring 3 状态。    **添加内核模块**的目的，就是增加一个自己设计的系统调用，并让对应的进程运行在此新内核之上，享受到该系统调用所提供的（简单）服务。</code></pre></div><h2 id="内核模块"><a href="#内核模块" class="headerlink" title="内核模块"></a>内核模块</h2><div class="hljs code-wrapper"><pre><code>    内核模块的编写方式不同于大家在应用层的程序编写方式——main 函数——从头到尾写下去，而是有其固定的编程框架。一般在通过一个特别的 makefile 文件对其编译成功后，会输出后缀名为 ko 的内核模块文件，再利用 insmod 命令将其加载进正在运行的内核即可。（还有一种静态方法可以添加进程调用——源码，找到对应的源码位置，加入新系统调用的入口和相关执行逻辑，之后，重新编译和安装整个新内核）    **最后，请注意，此内核模块的功能是：从真正意义上为当前操作系统设计一个新的系统调用（在此内核模块的源码里有相应的加入“新系统调用“的程序语句），然后供上层应用程序所使用（你的应用程序调用了此”接口“），绝不是在内核模块的加载过程中简单地用 printk 来进行一次字符串输出。 **</code></pre></div><h1 id="正文（添加内核模块）"><a href="#正文（添加内核模块）" class="headerlink" title="正文（添加内核模块）"></a>正文（添加内核模块）</h1><h2 id="创建c文件和Makefile文件"><a href="#创建c文件和Makefile文件" class="headerlink" title="创建c文件和Makefile文件"></a>创建c文件和Makefile文件</h2><ol><li>在任意位置创建一个文件夹<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mkdir /LKM<br></code></pre></div></td></tr></table></figure></li><li>然后进入文件夹<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /LKM<br></code></pre></div></td></tr></table></figure></li><li>新建c文件，我新建的是zengshangren20192333011.c<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#创建文件命令：</span><br>vim zengshangren20192333011.c<br></code></pre></div></td></tr></table></figure>代码如下，注意在对应地方修改成自己的信息！<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;linux/init.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;linux/module.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;linux/kernel.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">zengshangren_init</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>        printk(KERN_ALERT<span class="hljs-string">&quot;zengshangren 20192333011&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">zengshangren_exit</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>        printk(KERN_ALERT<span class="hljs-string">&quot;Bye,zengshangren&quot;</span>);<br>&#125;<br>module_init(zengshangren_init);<br>module_exit(zengshangren_exit);<br></code></pre></div></td></tr></table></figure></li><li>新建Makefile文件，注意第一个字母一定要大写！<figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">obj-m += zengshangren20192333011.o<br>KERNELBUILD +=/usr/src/linux-headers-5.4.0-88-generic<br>all:<br>        make -C <span class="hljs-variable">$&#123;KERNELBUILD&#125;</span> M=<span class="hljs-variable">$&#123;shell pwd&#125;</span> modules<br>clean:<br>        rm -f *.ko *.o *.mod.o *mod.c *.symvers<br>CONFIG_MODULE_SIG=n<br></code></pre></div></td></tr></table></figure>注意：</li></ol><ul><li>最后一句CONFIG_MODULE_SIG=n，是由于Linux内核3.7之后添加了内核签名机制，现在的内核只加载带有公钥的合法模块，因此可以尝试引入公钥mokutil –import public_key.der。当然，为了方便，Linux中默认CONFIG_MODULE_SIG = y即签名开启状态，因此可以在内核代码的config文件中找到并将其改为CONFIG_MODULE_SIG = n<br>这样就不会报错啦</li><li>注意Makefile的大写字母M</li></ul><h2 id="编译Makefile文件"><a href="#编译Makefile文件" class="headerlink" title="编译Makefile文件"></a>编译Makefile文件</h2><p>直接在/LKM下输入命令“make”</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">make<br></code></pre></div></td></tr></table></figure><h2 id="添加、移除模块"><a href="#添加、移除模块" class="headerlink" title="添加、移除模块"></a>添加、移除模块</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#添加模块</span><br>insmod hello.ko<br><br><span class="hljs-comment">#移除模块</span><br>rmmod hello.ko<br></code></pre></div></td></tr></table></figure><p>##查看是否添加成功<br>输入命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">dmesg<br></code></pre></div></td></tr></table></figure><p>结果如下</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[ 1422.987516] zengshangren20192333011: loading out-of-tree module taints kernel.<br>[ 1422.987534] zengshangren20192333011: module license <span class="hljs-string">&#x27;unspecified&#x27;</span> taints kernel.<br>[ 1422.987535] Disabling lock debugging due to kernel taint<br>[ 1422.987703] zengshangren20192333011: module verification failed: signature and/or required key missing - tainting kernel<br>[ 1422.988570] zengshangren 20192333011<br>[ 1769.299685] Bye,zengshangren<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>远程连接linux运行jar包，在关闭终端后jar包停止运行怎么办？</title>
    <link href="/2021/11/08/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5linux%E8%BF%90%E8%A1%8Cjar%E5%8C%85%EF%BC%8C%E5%9C%A8%E5%85%B3%E9%97%AD%E7%BB%88%E7%AB%AF%E5%90%8Ejar%E5%8C%85%E5%81%9C%E6%AD%A2%E8%BF%90%E8%A1%8C%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/"/>
    <url>/2021/11/08/%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5linux%E8%BF%90%E8%A1%8Cjar%E5%8C%85%EF%BC%8C%E5%9C%A8%E5%85%B3%E9%97%AD%E7%BB%88%E7%AB%AF%E5%90%8Ejar%E5%8C%85%E5%81%9C%E6%AD%A2%E8%BF%90%E8%A1%8C%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>普通运行jar包的命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#使用这种方式，在远程连接的窗口关闭后，这个jar包开启的进程也随之关闭</span><br>java -jar xxx.jar <br></code></pre></div></td></tr></table></figure><p>解决方法1：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#使用这种方式表示ssh窗口不被锁定，但是关闭窗口的时候，程序还是会退出</span><br>java -jar xxx.jar &amp;<br></code></pre></div></td></tr></table></figure><p>解决方法2：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#使用这种方式表示不挂断运行命令行，当账号退出或者关闭终端的时候，程序仍然运行</span><br><span class="hljs-comment">#当用nohup命令执行jar的时候，改作业所有输出被重定向到nohup.out的文件中，除非指定另外的输出文件</span><br>nohup java -jar xxx.jar &amp;<br></code></pre></div></td></tr></table></figure><p>解决方法3：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment">#表示把所有的启动日志 记录到temp.txt文件中</span><br>nohup java -jar xxx.jar &gt;/usr/<span class="hljs-built_in">local</span>/temp.txt &amp;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker下载太慢，更换镜像源</title>
    <link href="/2021/11/07/docker%E4%B8%8B%E8%BD%BD%E5%A4%AA%E6%85%A2%EF%BC%8C%E6%9B%B4%E6%8D%A2%E9%95%9C%E5%83%8F%E6%BA%90/"/>
    <url>/2021/11/07/docker%E4%B8%8B%E8%BD%BD%E5%A4%AA%E6%85%A2%EF%BC%8C%E6%9B%B4%E6%8D%A2%E9%95%9C%E5%83%8F%E6%BA%90/</url>
    
    <content type="html"><![CDATA[<h1 id="比较快的镜像源"><a href="#比较快的镜像源" class="headerlink" title="比较快的镜像源"></a>比较快的镜像源</h1><table><thead><tr><th>网站</th><th>网址</th></tr></thead><tbody><tr><td>网易云</td><td><a href="https://hub-mirror.c.163.com/">https://hub-mirror.c.163.com</a></td></tr><tr><td>百度云</td><td><a href="https://mirror.baidubce.com/">https://mirror.baidubce.com</a></td></tr><tr><td>阿里云</td><td><a href="https://ustc-edu-cn.mirror.aliyuncs.com/">https://ustc-edu-cn.mirror.aliyuncs.com</a></td></tr></tbody></table><h1 id="编辑配置文件"><a href="#编辑配置文件" class="headerlink" title="编辑配置文件"></a>编辑配置文件</h1><p>编辑 /etc/docker/daemon.json 配置文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">创建配置文件目录<br>$ sudo mkdir /etc/docker<br><br>编辑配置文件，如果文件不存在，需要自己创建一个。<br>$ sudo vim /etc/docker/daemon.json<br><br>将配置信息粘贴到配置文件中，配置信息为 json 格式，可以根据实际需要设置多个国内的镜像服务器。<br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br><span class="hljs-string">&quot;https://ustc-edu-cn.mirror.aliyuncs.com&quot;</span><br>  ]<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="重启docker服务"><a href="#重启docker服务" class="headerlink" title="重启docker服务"></a>重启docker服务</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo systemctl daemon-reload <br>$ sudo systemctl restart docker<br></code></pre></div></td></tr></table></figure><h1 id="查看镜像源"><a href="#查看镜像源" class="headerlink" title="查看镜像源"></a>查看镜像源</h1><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ sudo docker info<br></code></pre></div></td></tr></table></figure><p>如果看到相关网址已经更改即修改成功！</p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux|ubuntu 安装jdk</title>
    <link href="/2021/11/07/linux%E4%B8%8B%E5%AE%89%E8%A3%85jdk/"/>
    <url>/2021/11/07/linux%E4%B8%8B%E5%AE%89%E8%A3%85jdk/</url>
    
    <content type="html"><![CDATA[<h1 id="jdk的安装目录"><a href="#jdk的安装目录" class="headerlink" title="jdk的安装目录"></a>jdk的安装目录</h1><p>linux中最标准的java jdk安装目录是：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">/usr/<span class="hljs-built_in">local</span>/java/<br></code></pre></div></td></tr></table></figure><p>在/usr/local下创建一个名为java的文件夹</p><h1 id="下载jdk"><a href="#下载jdk" class="headerlink" title="下载jdk"></a>下载jdk</h1><p><strong>一、去官网选择自己所需的jdk</strong><br>官网地址：<a href="https://www.oracle.com/java/technologies/downloads/">下载地址</a></p><p>例如，我选择的是jdk17<br><img src="https://img-blog.csdnimg.cn/e05848f9b4a84b4da5f2ccbc6c5d4c7a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pu-5bCa5LuB,size_20,color_FFFFFF,t_70,g_se,x_16" alt="选择合适的jdk"><br><strong>二、复制红框的链接。</strong><br>复制红框的链接后，进入linux系统中/usr/local/java/<br>然后敲如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">wget https://download.oracle.com/java/17/latest/jdk-17_linux-x64_bin.tar.gz<br></code></pre></div></td></tr></table></figure><p>注意，wget后面的链接是你刚刚复制的链接！</p><h1 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h1><p><strong>一、解压</strong><br>下载了上面的jdk后，会在/usr/local/java中看见这个文件，随后解压：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">tar zxf xxx.tar.gz <br></code></pre></div></td></tr></table></figure><p>xxx修改成对应的包的文件名即可<br>解压成功后可以删除这个包</p><p><strong>二、配置环境变量</strong><br>修改相关配置文件</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">vim /etc/profile<br></code></pre></div></td></tr></table></figure><p>打开文件后再末尾添加：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> JAVA17_HOME=/jdk17/jdk-17.0.1<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA17_HOME</span>/bin<br></code></pre></div></td></tr></table></figure><p>注意修改对应的版本。我这里是17。<br>最后输入命令让配置文件生效：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> /etc/profile<br></code></pre></div></td></tr></table></figure><p><strong>三、查看java版本</strong><br>输入命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">java -version<br></code></pre></div></td></tr></table></figure><p>查看到对应java版本即安装结束</p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
